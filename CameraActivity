package com.informer.favoraid;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.Toast;

import com.informer.favoraid.adapter.SlidingMenuAdapter;
import com.informer.favoraid.constants.AppConstants;
import com.informer.favoraid.constants.PreferencesData;
import com.informer.favoraid.data.MenuItems;

@SuppressLint("SimpleDateFormat")
public class MainActivity extends Activity implements OnClickListener {

	private static final int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 10;
	private static final int CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE = 1000;
	public static final int MEDIA_TYPE_IMAGE = 1;
	public static final int MEDIA_TYPE_VIDEO = 2;
	PopupWindow test;
	ImageView imgTest;
	ListView popUpList;
	ArrayList<MenuItems> items;
	SharedPreferences pref;
	ProgressDialog pDlg;
	SlidingMenuAdapter adapter;
	private ImageView imgCamera;
	private String mCurrentPhotoPath;
	private Uri fileUri;
	private String mCurrentVideoPath;

	private static String TAG = MainActivity.class.getSimpleName();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		pref = getSharedPreferences(PreferencesData.prefName,
				Context.MODE_PRIVATE);

		imgTest = (ImageView) findViewById(R.id.imgMenu);
		imgCamera = (ImageView) findViewById(R.id.imgCamera);
		items = new ArrayList<MenuItems>();
		items.add(new MenuItems(R.drawable.sub_menu_inbox_icon,
				getString(R.string.menuitem_inbox)));
		items.add(new MenuItems(R.drawable.sub_menu_project_icon,
				getString(R.string.menuitem_projects)));
		items.add(new MenuItems(R.drawable.sub_menu_content_icon,
				getString(R.string.menuitem_contents)));
		items.add(new MenuItems(R.drawable.sub_menu_content_icon,
				getString(R.string.menuitem_profile)));
		imgCamera.setOnClickListener(this);
		imgTest.setOnClickListener(new View.OnClickListener() {

			@Override
			public void onClick(View v) {
				setUpPopUpWindow();
				test.showAsDropDown(imgTest);

				imgTest.setSelected(true);
			}
		});
	}

	public void setUpPopUpWindow() {
		LayoutInflater layoutInflater = (LayoutInflater) getBaseContext()
				.getSystemService(LAYOUT_INFLATER_SERVICE);
		View popupView = layoutInflater.inflate(R.layout.popup_layout, null);
		test = new PopupWindow(popupView, LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT);

		// Closes the popup window when touch outside of it - when looses focus
		test.setBackgroundDrawable(new BitmapDrawable());
		test.setOutsideTouchable(true);
		test.setFocusable(true);

		test.setOnDismissListener(new OnDismissListener() {

			@Override
			public void onDismiss() {
				imgTest.setSelected(false);
			}
		});

		popUpList = (ListView) popupView.findViewById(R.id.menu_list);

		adapter = new SlidingMenuAdapter(this, items, null);

		// Assign adapter to ListView
		popUpList.setAdapter(adapter);

		// ListView Item Click Listener
		popUpList.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				int itemPosition = position;
				// ListView Clicked item value
				String itemValue = items.get(position).getItem_name();

				// Show Alert
				Toast.makeText(
						getApplicationContext(),
						"Position :" + itemPosition + "  ListItem : "
								+ itemValue, Toast.LENGTH_LONG).show();
				test.dismiss();

				if (itemPosition == 3) {
					Intent mProfileIntent = new Intent(MainActivity.this,
							UserProfileActivity.class);
					startActivity(mProfileIntent);
				}

			}

		});

	}

	@Override
	public void onClick(View v) {

		if (v == imgCamera) {
			showDialog();
		}
	}

	public void showDialog() {
		Dialog dialog = new Dialog(this);
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(getResources().getString(R.string.choose_option));
		builder.setItems(
				new CharSequence[] { getResources().getString(R.string.image),
						getResources().getString(R.string.video) },
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						switch (which) {
						case 0:
							dispatchTakePictureIntent();
							break;

						case 1:
							dispatchTakeVideoIntent();
							break;
						default:
							break;
						}
					}

				});

		builder.show();
		dialog.dismiss();
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {
			if (resultCode == RESULT_OK) {
				// Image captured and saved to fileUri specified in the Intent
				/*
				 * Toast.makeText(this, "Image saved to:\n" + mCurrentPhotoPath,
				 * Toast.LENGTH_LONG).show();
				 */
			} else if (resultCode == RESULT_CANCELED) {
				// User cancelled the image capture
				File f = new File(mCurrentPhotoPath);
				f.delete();
				/*
				 * Toast.makeText(this, "file delete to:\n" + mCurrentPhotoPath,
				 * Toast.LENGTH_LONG).show();
				 */
			} else {
				File f = new File(mCurrentPhotoPath);
				f.delete();
				/*
				 * Toast.makeText(this, "file delete to:\n" + mCurrentPhotoPath,
				 * Toast.LENGTH_LONG).show();
				 */
			}
		}

		if (requestCode == CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE) {
			if (resultCode == RESULT_OK) {
				// Video captured and saved to fileUri specified in the Intent
				/*
				 * Toast.makeText(this, "Video saved to:\n" + mCurrentVideoPath,
				 * Toast.LENGTH_LONG).show();
				 */
			} else if (resultCode == RESULT_CANCELED) {
				File f = new File(mCurrentPhotoPath);
				f.delete();
				// User cancelled the video capture
				/*
				 * Toast.makeText(this, "Video cancle to:\n" +
				 * mCurrentVideoPath, Toast.LENGTH_LONG).show();
				 */
			} else {
				File f = new File(mCurrentPhotoPath);
				f.delete();
				// Video capture failed, advise user
				/*
				 * Toast.makeText(this, "Video failed to:\n" +
				 * mCurrentVideoPath, Toast.LENGTH_LONG).show();
				 */
			}
		}
	}

	private void dispatchTakePictureIntent() {
		Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		// Ensure that there's a camera activity to handle the intent
		if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
			// Create the File where the photo should go
			File photoFile = null;
			try {
				photoFile = createImageFile();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
			// Continue only if the File was successfully created
			if (photoFile != null) {
				takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,
						Uri.fromFile(photoFile));
				startActivityForResult(takePictureIntent,
						CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);
			}
		}
	}

	private void dispatchTakeVideoIntent() {
		// create new Intent
		Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
		intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1); // set the video
															// image quality to
															// high
		File videoFile = null;
		try {
			videoFile = createVideoFile();
		} catch (IOException ex) {
			ex.printStackTrace();
		}

		// Continue only if the File was successfully created
		if (videoFile != null) {
			intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(videoFile)); // set
																				// the
																				// image
																				// file
																				// name
			// start the Video Capture Intent
			startActivityForResult(intent, CAPTURE_VIDEO_ACTIVITY_REQUEST_CODE);
		}

	}

	private File createImageFile() throws IOException {
		// Create an image file name
		ContextWrapper c = new ContextWrapper(this);
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss")
				.format(new Date());
		String imageFileName = "JPEG_FAV" + timeStamp + "_";

		File storageDir = new File(Environment.getExternalStorageDirectory(),
				AppConstants.FILE_PATH);

		// Create the storage directory if it does not exist
		if (!storageDir.exists()) {
			if (!storageDir.mkdirs()) {
				Log.d("MyCameraApp", "failed to create directory");
				return null;
			}
		}

		File image = File.createTempFile(imageFileName, /* prefix */
				".jpg", /* suffix */
				storageDir /* directory */
		);

		// Save a file: path for use with ACTION_VIEW intents
		mCurrentPhotoPath = image.getAbsolutePath();
		return image;
	}

	private File createVideoFile() throws IOException {
		// Create an image file name
		ContextWrapper c = new ContextWrapper(this);
		String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss")
				.format(new Date());
		String imageFileName = "MP4_FAV" + timeStamp + "_";

		File storageDir = new File(Environment.getExternalStorageDirectory(),
				AppConstants.FILE_PATH);

		// Create the storage directory if it does not exist
		if (!storageDir.exists()) {
			if (!storageDir.mkdirs()) {
				Log.d("MyCameraApp", "failed to create directory");
				return null;
			}
		}

		File image = File.createTempFile(imageFileName, /* prefix */
				".mp4", /* suffix */
				storageDir /* directory */
		);

		// Save a file: path for use with ACTION_VIEW intents
		mCurrentVideoPath = image.getAbsolutePath();
		return image;
	}
}
